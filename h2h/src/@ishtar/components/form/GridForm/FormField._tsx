import _ from "@lodash";
import { ColProps, Grid } from "@mantine/core";
import React, { memo } from "react";
import { SimpleStyleProps } from "types";
import { BaseFieldType, FieldType } from "./types._ts";
import { getFieldType, RenderFieldProps } from "./utils";

export type CommonProps = {
  required?: boolean;
} & SimpleStyleProps;

export type FormFieldProps<T> = {
  field: FieldType<T> | BaseFieldType;
  commonProps?: CommonProps;
  wrapperProps?: ColProps;
  parent?: string;
};

function FormField<T>({ field: rawField, parent, ...props }: FormFieldProps<T>) {
  const renderField = ({ value: _value, ...renderProps }: Partial<RenderFieldProps>) => {
    const Field = "type" in rawField ? getFieldType(rawField.type) : rawField.Field;

    const value =
      _value && "type" in rawField && rawField.type === "date"
        ? new Date(_value as string)
        : _value;

    return (
      rawField.render?.({ ...renderProps, value }) ||
      (Field ? (
        <Field {...renderProps} value={value} />
      ) : rawField.field ? (
        React.cloneElement(rawField.field, {
          ...renderProps,
          ...rawField.field.props,
          value,
        })
      ) : null)
    );
  };

  return (
    <Grid.Col {..._.merge({ xs: 12 }, props.wrapperProps, rawField.wrapperProps)}>
      {renderField(
        "name" in rawField
          ? _.merge(
              {},
              rawField.props,
              { name: parent ? `${parent}.${rawField.name}` : rawField.name },
              props.commonProps
            )
          : {}
      )}
    </Grid.Col>
  );
}

export default memo(FormField);
