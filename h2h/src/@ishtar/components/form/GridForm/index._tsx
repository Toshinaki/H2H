import { useImperativeHandle } from "react";
import { Box, Divider, Grid, GridProps, Paper, PaperProps, Text } from "@mantine/core";
import { useForm, FormErrors } from "@mantine/form";
import _ from "lodash";
import FormField from "./FormField._tsx";
import { SimpleStyleProps } from "types";
import { UseFormInput, UseFormReturnType } from "@mantine/form/lib/types";
import { BaseFieldType, GridFormFieldsType } from "./types._ts";

export type BaseGridFormProps<T> = {
  extraFields?: Array<BaseFieldType>;
};

export type GridFormRef<T> = {
  form: UseFormReturnType<T>;
} | null;

// function Form<T>(props: FormProps<T>): JSX.Element {}

type GridFormProps<T> = {
  id?: string;
  fields: GridFormFieldsType<T>;
  onSubmit: (values: T, event: React.FormEvent<HTMLFormElement>) => void;
  onError?: (errors: FormErrors, values: T, event: React.FormEvent<HTMLFormElement>) => void;
  paperProps: Omit<PaperProps, "children" | "className" | "component">;
} & UseFormInput<T> &
  SimpleStyleProps &
  Omit<GridProps, "children"> &
  FormProps;

function GridForm<T>(
  props: GridFormProps<T> & { formRef?: React.Ref<GridFormRef<T>> }
): JSX.Element {
  const {
    id = "ishtar-grid-form",
    initialValues,
    initialErrors,
    clearInputErrorOnChange,
    validate,
    validateInputOnChange,
    formRef,
    onSubmit,
    onError, // console.warn,
    paperProps,
    className,
    ...rest
  } = props;

  const form = useForm<T>({
    initialValues,
    initialErrors,
    clearInputErrorOnChange,
    validate,
    validateInputOnChange,
  });

  useImperativeHandle(formRef, () => ({ form }));

  return (
    <Paper
      component="form"
      id={id}
      noValidate
      onSubmit={form.onSubmit(onSubmit, onError)}
      className={className}
      {...paperProps}
    >
      <Form {...rest} />
    </Paper>
  );
}

export default GridForm;

type FormProps<T> = {
  fields: GridFormFieldsType<T>;
  parent?: string;
} & BaseGridFormProps<T>;

function Form<T>(props: FormProps<T>): JSX.Element {
  const { parent } = props;

  return (
    <Grid>
      {props.fields.map((field, index) =>
        "children" in field ? (
          <Grid.Col key={index}>
            <Box component="fieldset">
              <Text component="legend">{field.label}</Text>
              <Form
                {..._.omit(props, ["fields"])}
                fields={field.children}
                parent={field.name as string}
              />
            </Box>
          </Grid.Col>
        ) : "type" in field && field.type === "divider" ? (
          <Divider key={index} />
        ) : (
          <FormField key={index} field={field} parent={parent} />
        )
      )}
    </Grid>
  );
}
